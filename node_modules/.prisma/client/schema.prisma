// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ResponsableFiliere {
  idResponsableFiliere Int         @id @default(autoincrement())
  nom                  String      @db.VarChar(50)
  prenom               String      @db.VarChar(50)
  email                String      @unique @db.VarChar(100)
  motDePasse           String      @db.VarChar(50)
  departement          String      @db.VarChar(100)
  annee                Int
  encadrants           Encadrant[]
}

model Encadrant {
  idEncadrant          Int                   @id @default(autoincrement())
  nom                  String                @db.VarChar(50)
  prenom               String                @db.VarChar(50)
  email                String                @unique @db.VarChar(100)
  motDePasse           String                @db.VarChar(50)
  annee                Int
  idResponsableFiliere Int?                  @db.Int
  responsableFiliere   ResponsableFiliere?   @relation(fields: [idResponsableFiliere], references: [idResponsableFiliere])
  sujets               Sujet[]
  soutenances          EncadrantSoutenance[]
  livrables            EncadrantLivrable[]
}

model Tuteur {
  idTuteur   Int              @id @default(autoincrement())
  nom        String           @db.VarChar(50)
  prenom     String           @db.VarChar(50)
  email      String           @unique @db.VarChar(100)
  motDePasse String           @db.VarChar(50)
  classe     String           @db.VarChar(50)
  filiere    String           @db.VarChar(100)
  annee      Int
  PFEs       PFE[]
  livrables  TuteurLivrable[]
}

model Etudiant {
  idEtudiant  Int              @id @default(autoincrement())
  nom         String           @db.VarChar(50)
  prenom      String           @db.VarChar(50)
  email       String           @unique @db.VarChar(100)
  motDePasse  String           @db.VarChar(50)
  annee       Int
  classe      String           @db.VarChar(50)
  filiere     String           @db.VarChar(100)
  groupes     EtudiantGroupe[]
  sujets      EtudiantSujet[]
  evaluations Evaluation[]
}

model Groupe {
  idGroupe    Int              @id @default(autoincrement())
  nomGroupe   String           @db.VarChar(50)
  nbEtudiants Int
  etudiants   EtudiantGroupe[]
  PFEs        PFE_Groupe[]
}

model EtudiantGroupe {
  idEtudiant Int
  idGroupe   Int
  etudiant   Etudiant @relation(fields: [idEtudiant], references: [idEtudiant], onDelete: Cascade)
  groupe     Groupe   @relation(fields: [idGroupe], references: [idGroupe], onDelete: Cascade)

  @@id([idEtudiant, idGroupe])
}

model Sujet {
  idSujet     Int             @id @default(autoincrement())
  titre       String          @db.VarChar(255)
  description String          @db.Text
  annee       Int
  idEncadrant Int
  encadrant   Encadrant       @relation(fields: [idEncadrant], references: [idEncadrant], onDelete: Cascade)
  etudiants   EtudiantSujet[]
}

model EtudiantSujet {
  idEtudiant Int
  idSujet    Int
  etudiant   Etudiant @relation(fields: [idEtudiant], references: [idEtudiant], onDelete: Cascade)
  sujet      Sujet    @relation(fields: [idSujet], references: [idSujet], onDelete: Cascade)

  @@id([idEtudiant, idSujet])
}

model Jury {
  idJury             Int          @id @default(autoincrement())
  valideDeliberation Boolean
  soutenances        Soutenance[]
}

model Soutenance {
  idSoutenance Int                   @id @default(autoincrement())
  date         DateTime
  heure        DateTime
  idJury       Int
  jury         Jury                  @relation(fields: [idJury], references: [idJury], onDelete: Cascade)
  encadrants   EncadrantSoutenance[]
  evaluations  Evaluation[]
}

model Evaluation {
  idEvaluation Int        @id @default(autoincrement())
  note         Float
  feedback     String?    @db.VarChar(255)
  idSoutenance Int
  idEtudiant   Int
  soutenance   Soutenance @relation(fields: [idSoutenance], references: [idSoutenance], onDelete: Cascade)
  etudiant     Etudiant   @relation(fields: [idEtudiant], references: [idEtudiant], onDelete: Cascade)
}

model Livrable {
  idLivrable Int                 @id @default(autoincrement())
  type       String              @db.VarChar(50)
  nom        String              @db.VarChar(100)
  annee      Int
  PFEs       PFE_Livrable[]
  encadrants EncadrantLivrable[]
  tuteurs    TuteurLivrable[]
}

model PFE {
  idPFE     Int            @id @default(autoincrement())
  statut    Int
  annee     Int
  idTuteur  Int
  tuteur    Tuteur         @relation(fields: [idTuteur], references: [idTuteur], onDelete: Cascade)
  groupes   PFE_Groupe[]
  livrables PFE_Livrable[]
}

model PFE_Groupe {
  idPFE    Int
  idGroupe Int
  pfe      PFE    @relation(fields: [idPFE], references: [idPFE], onDelete: Cascade)
  groupe   Groupe @relation(fields: [idGroupe], references: [idGroupe], onDelete: Cascade)

  @@id([idPFE, idGroupe])
}

model PFE_Livrable {
  idPFE      Int
  idLivrable Int
  pfe        PFE      @relation(fields: [idPFE], references: [idPFE], onDelete: Cascade)
  livrable   Livrable @relation(fields: [idLivrable], references: [idLivrable], onDelete: Cascade)

  @@id([idPFE, idLivrable])
}

model EncadrantLivrable {
  idEncadrant Int
  idLivrable  Int
  encadrant   Encadrant @relation(fields: [idEncadrant], references: [idEncadrant], onDelete: Cascade)
  livrable    Livrable  @relation(fields: [idLivrable], references: [idLivrable], onDelete: Cascade)

  @@id([idEncadrant, idLivrable])
}

model TuteurLivrable {
  idTuteur   Int
  idLivrable Int
  tuteur     Tuteur   @relation(fields: [idTuteur], references: [idTuteur], onDelete: Cascade)
  livrable   Livrable @relation(fields: [idLivrable], references: [idLivrable], onDelete: Cascade)

  @@id([idTuteur, idLivrable])
}

model EncadrantSoutenance {
  idEncadrant  Int
  idSoutenance Int
  encadrant    Encadrant  @relation(fields: [idEncadrant], references: [idEncadrant], onDelete: Cascade)
  soutenance   Soutenance @relation(fields: [idSoutenance], references: [idSoutenance], onDelete: Cascade)

  @@id([idEncadrant, idSoutenance])
}
